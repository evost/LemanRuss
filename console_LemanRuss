#define switchPinA  11 // кнопка джойстика A
#define switchPinB  12 // кнопка джойстика B
#define pinAX       A0 // Ось X джойстика A
#define pinAY       A1 // Ось Y джойстика A
#define pinBX       A2 // Ось X джойстика B
#define pinBY       A3 // Ось Y джойстика B
#define ledPin      13
#define bounce      64
#define breaking_rc '_'
#define forward_rc  'w'
#define back_rc     's'
#define right_rc    'd'
#define left_rc     'a'
#define gear1_rc    '<'
#define gear2_rc    '>'
#define changmod_rc 'm'
int calibrateAX = 512;
int calibrateAY = 512;                                                                                           
int ax = calibrateAX;
int ay = calibrateAY;
bool manual = true;
char tmp = breaking_rc;
char cur_cmd = breaking_rc;
char next_cmd = cur_cmd;
char cur_gear = gear2_rc;
char next_gear = cur_gear;
void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(switchPinA, INPUT);
  digitalWrite(switchPinA, HIGH); // включаем встроенный подтягивающий резистор
  calibrateAX = analogRead(pinAX);
  calibrateAY = analogRead(pinAY);
  Serial.begin(9600);
  while (!Serial){};
  while (true) {
    digitalWrite(ledPin, HIGH);
    delay(256);
    digitalWrite(ledPin, LOW);
    delay(256);
    Serial.write('p');
    if (Serial.available()) {
      while (tmp != '1' || tmp != '0')
        tmp = Serial.read();
      if (tmp == '1') {
        manual = true;
        digitalWrite(ledPin, HIGH);
        Serial.write(breaking_rc);
        break;
      } else {
        manual = false;
        digitalWrite(ledPin, LOW);
        break;
      }
    }
  }
}
void loop() {
  if (digitalRead(switchPinA) == LOW) {
    Serial.write(changmod_rc);
    manual = !manual;
    if (manual)
      digitalWrite(ledPin, HIGH);
    else
      digitalWrite(ledPin, LOW);
    while (digitalRead(switchPinA) == LOW){};
  }
  if (manual) {
    ax = analogRead(pinAX); // считываем аналоговое значение оси Х джойстика A
    ay = analogRead(pinAY); // считываем аналоговое значение оси Y джойстика A
    if ((ax <= calibrateAX - bounce*3) || (ay <= calibrateAY - bounce*3) || (ax >= calibrateAX + bounce*3) || (ay >= calibrateAY + bounce*3))
      next_gear = gear2_rc;
    else
      next_gear = gear1_rc;
    if (next_gear != cur_gear) {
      cur_gear = next_gear;
      Serial.write(cur_gear);
    }
    if (ay < calibrateAY - bounce)
      next_cmd = back_rc;
    else if (ay > calibrateAY + bounce)
      next_cmd = forward_rc;
    else if (ax < calibrateAX - bounce)
      next_cmd = left_rc;
    else if (ax > calibrateAX + bounce)
      next_cmd = right_rc;
    else 
      next_cmd = breaking_rc;
    if (next_cmd != cur_cmd) {
      cur_cmd = next_cmd;
      Serial.write(cur_cmd);
    }
  }
}
